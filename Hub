local players = game:GetService("Players")
local localPlayer = players.LocalPlayer
local char = localPlayer.Character
local human = char.Humanoid
local replicatedStorage = game:GetService("ReplicatedStorage")
local runService = game:GetService("RunService")
local RenderPath = replicatedStorage.D8ClientFramework.Services.NPCService.Resources.RenderObject.RenderContainer
local Camera = game.workspace.Camera

local Library = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()

local Window = Library:CreateWindow{
    Title = 'Mystirista',
    SubTitle = "1.0.0",
    TabWidth = 160,
    Size = UDim2.fromOffset(830, 525),
    Resize = true, -- Resize this ^ Size according to a 1920x1080 screen, good for mobile users but may look weird on some devices
    MinSize = Vector2.new(470, 380),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "VS Light",
    MinimizeKey = Enum.KeyCode.RightControl -- Used when theres no MinimizeKeybind
}

-- Fluent Renewed provides ALL 1544 Lucide 0.469.0 https://lucide.dev/icons/ Icons and ALL 9072 Phosphor 2.1.0 https://phosphoricons.com/ Icons for the tabs, icons are optional
local Tabs = {
    Main = Window:CreateTab{
        Title = "Main",
        Icon = "phosphor-users-bold"
    },
    Humanoid = Window:CreateTab{
        Title = "Humanoid",
        Icon = "phosphor-user-gear-bold"
    },
    Settings = Window:CreateTab{
        Title = "Settings",
        Icon = "settings"
    }
}

--// Lists
local mobFolder = game.Workspace.CurrentCamera  -- Directly access the property
local localPlayer = game:GetService("Players").LocalPlayer

local mobList = {}
local mobNameDictionary = {} -- Use a dictionary to track mob names

local function populateMobList()
    mobList = {}
    mobNameDictionary = {} -- Clear the dictionary each time

    for i, v in ipairs(mobFolder:GetChildren()) do
        if v:IsA("Model") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and v.Name and string.find(v.Name, "Lvl") then
            if localPlayer and not string.find(v.Name, localPlayer.Name) then
                -- Check if the mob name is already in the dictionary
                if not mobNameDictionary[v.Name] then
                    -- If not, add it to the dictionary and the list
                    mobNameDictionary[v.Name] = true  -- Mark it as seen
                    table.insert(mobList, v.Name)
                end
            elseif not localPlayer then
                -- Check if the mob name is already in the dictionary
                if not mobNameDictionary[v.Name] then
                    -- If not, add it to the dictionary and the list
                    mobNameDictionary[v.Name] = true  -- Mark it as seen
                    table.insert(mobList, v.Name)
                end
            end
        end
    end
end


--[[local RefreshMob = function(MobList, UpdatedMobList)
	local UpdatedMobList = {}
	for _,v in workspace.CurrentCamera:GetChildren() do
		if v.ClassName == "Model" and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and string.find(v.Name,"Lvl") then

	end

end]]

local Options = Library.Options

--//
local Status = {
    BossNotification = {
        Enabled = false,
    },
	MobFarm = {
		Enabled = false,
		ChosenMob = "",
	},
    HumanoidModification = {
        WS = {
            Enabled = false,
            Value = 24,
        },
        JP = {
            Enabled = false,
            Value = 50,
        },
    },

}

--// Tab Features
do

    local BossNotify = Tabs.Main:CreateToggle("BossNotify",
        {Title = "Boss Notify",
            Default = false
        })

		local MobList = Tabs.Main:CreateDropdown("MobList", {
			Title = "Mob List",
			Values = mobList,
			Multi = false,
			Default = nil,
		})

		Tabs.Main:CreateButton{
			Title = "Refresh Mob List",
			Description = "Refresh mob list, only get mob in available vision range.",
			Callback = function()
                populateMobList()
			end
		}

		local MobFarm = Tabs.Main:CreateToggle("MobFarm",
        {Title = "Autowalk to Chosen Mob",
            Default = false
        })

    local WSS = Tabs.Humanoid:CreateSlider("WSS", {
        Title = "Walkspeed Value",
        Description = "Modify character's walkspeed",
        Default = Status.HumanoidModification.WS.Value,
        Min = 0,
        Max = 300,
        Rounding = 1,
        Callback = function(Value)
        end
    })

    local WS = Tabs.Humanoid:CreateToggle("WS",
        {Title = "Walkspeed Enabled",
            Default = false
        })

    local JPS = Tabs.Humanoid:CreateSlider("JPS", {
        Title = "Jumppower Value",
        Description = "Modify character's jumppower",
        Default = Status.HumanoidModification.JP.Value,
        Min = 0,
        Max = 500,
        Rounding = 1,
        Callback = function(Value)
        end
    })

    local JP = Tabs.Humanoid:CreateToggle("JP",
        {Title = "Jumppower Enabled",
            Default = false
        })

    --// Callbacks
    BossNotify:OnChanged(
        function()
            Status.BossNotification.Enabled = Options.BossNotify.Value
        end
    )
	MobList:OnChanged(
        function()
            Status.MobFarm.ChosenMob = Options.MobList.Value
        end
    )
	MobFarm:OnChanged(
        function()
            Status.MobFarm.Enabled = Options.MobFarm.Value
        end
    )
    WS:OnChanged(
        function()
            Status.HumanoidModification.WS.Enabled = Options.WS.Value
        end
    )
    JP:OnChanged(
        function()
            Status.HumanoidModification.JP.Enabled = Options.JP.Value
        end
    )

    --// Functions
    task.spawn(
        function()
            while task.wait(1) do
                if Status.BossNotification.Enabled then
                    for _,v in RenderPath:GetChildren() do
                        if v:IsA("Model") and v.Name == "[Lvl: 100] - Judy - [Raid]" then
                            Library:Notify{
                                Title = "Mystirista",
                                Content = "Judy have spawned.",
                                SubContent = "nil", -- Optional
                                Duration = nil -- Set to nil to make the notification not disappear
                            }
							repeat task.wait() until RenderPath["[Lvl: 100] - Judy - [Raid]"].Humanoid.Health == 0
                        end
                    end
                end
            end
        end
    )

	task.spawn(function()
		while task.wait(0.01) do
			if Status.MobFarm.Enabled then
		for _,v in workspace.CurrentCamera:GetChildren() do
			if v.Name == Status.MobFarm.ChosenMob then
			if v.ClassName == "Model" and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and string.find(v.Name,"Lvl") then
				Humanoid:MoveTo(Value.HumanoidRootPart.Position)
				task.wait(math.random(1,3))
	end
end
end
	end
	end

	end
	)

    task.spawn(function()
        while task.wait() do
            if Status.HumanoidModification.WS.Enabled then
                human.WalkSpeed = Options.WSS.Value
            end
        end
    end
    )

    task.spawn(function()
        while task.wait() do
            if Status.HumanoidModification.JP.Enabled then
                human.JumpPower = Options.JPS.Value
            end
        end
    end
    )




end




SaveManager:SetLibrary(Library)
InterfaceManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()

SaveManager:SetIgnoreIndexes{}

InterfaceManager:SetFolder("Mystirista")
SaveManager:SetFolder("Mystirista/tml2")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Library:Notify{
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
}

SaveManager:LoadAutoloadConfig()
